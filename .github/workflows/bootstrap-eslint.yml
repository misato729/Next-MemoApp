name: Bootstrap ESLint (PR)

on:
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  bootstrap:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install ESLint & Next config
        run: npm i -D eslint eslint-config-next

      # 常に上書き（既存でも対話回避のために確実に置く）
      - name: Write .eslintrc.json
        run: |
          cat > .eslintrc.json <<'EOF'
          {
            "extends": ["next", "next/core-web-vitals"]
          }
          EOF

      # tsconfig が無い場合は生成、ある場合は .next/types を include に追加
      - name: Ensure tsconfig.json and include
        run: |
          if [ ! -f tsconfig.json ]; then
            cat > tsconfig.json <<'JSON'
            {
              "compilerOptions": {
                "target": "ES2020",
                "lib": ["dom", "dom.iterable", "es2020"],
                "allowJs": true,
                "skipLibCheck": true,
                "strict": true,
                "forceConsistentCasingInFileNames": true,
                "noEmit": true,
                "esModuleInterop": true,
                "module": "ESNext",
                "moduleResolution": "Bundler",
                "resolveJsonModule": true,
                "isolatedModules": true,
                "jsx": "preserve",
                "incremental": true,
                "plugins": [{ "name": "next" }]
              },
              "include": [
                "next-env.d.ts",
                "**/*.ts",
                "**/*.tsx",
                ".next/types/**/*.ts"
              ],
              "exclude": ["node_modules"]
            }
            JSON
          else
            node -e 'const fs=require("fs");const p="tsconfig.json";const j=JSON.parse(fs.readFileSync(p,"utf8"));j.include=j.include||["next-env.d.ts","**/*.ts","**/*.tsx"];if(!j.include.includes(".next/types/**/*.ts")) j.include.push(".next/types/**/*.ts");fs.writeFileSync(p,JSON.stringify(j,null,2)+"\n");'
          fi

      - name: Ensure package.json scripts
        run: |
          node -e 'const fs=require("fs");const p="package.json";const j=JSON.parse(fs.readFileSync(p,"utf8"));j.scripts=j.scripts||{};j.scripts.lint=j.scripts.lint||"next lint";j.scripts.typecheck=j.scripts.typecheck||"tsc --noEmit";j.scripts.build=j.scripts.build||"next build";fs.writeFileSync(p,JSON.stringify(j,null,2)+"\n");'

      - name: Commit changes
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git checkout -b chore/eslint-setup
          git add -A
          git commit -m "chore(eslint): ensure Next ESLint config & tsconfig include"
          git push -u origin chore/eslint-setup

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          branch: chore/eslint-setup
          title: "chore(eslint): ensure Next ESLint config & tsconfig include"
          body: |
            - Add/overwrite `.eslintrc.json` with Next recommended config
            - Ensure `tsconfig.json` includes `.next/types/**/*.ts`
            - Ensure `lint` / `typecheck` / `build` scripts exist
